{"version":3,"file":"static/js/137.218a72ea.chunk.js","mappings":"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","sources":["page/users/userForm.tsx","api/userList.ts","page/users/index.tsx"],"sourcesContent":["import { Modal, Row, Col, Form, Input ,Radio, message} from \"antd\"\r\nimport { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { editUser } from \"../../api/userList\";\r\ninterface FormProps {\r\n    visible: boolean;\r\n    hideModal: () => void;\r\n    title: string;\r\n    loadData:()=>void\r\n}\r\n\r\nfunction UserForm(props: FormProps) {\r\n    const [form]=Form.useForm();\r\n    const {userData}= useSelector((state:any)=>state.userSlice)\r\n    const { visible, hideModal, title,loadData } = props\r\n    const handleOk=()=>{\r\n        form.validateFields().then(async (res)=>{\r\n            const {data}=await editUser(res);\r\n            message.success(data)\r\n            hideModal();\r\n            loadData()\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    useEffect(()=>{\r\n        title==\"Add Enterprise\"? form.resetFields():form.setFieldsValue(userData)\r\n    },[visible])\r\n    return <>\r\n        <Modal\r\n            title={title}\r\n            open={visible}\r\n            onCancel={hideModal}\r\n            width={800}\r\n            onOk={handleOk}\r\n        >\r\n            <Form\r\n                form={form}\r\n                labelCol={{span:8}}\r\n                wrapperCol={{span:16}}\r\n            >\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Customer Name\"\r\n                            name=\"name\"\r\n                            rules={[{ required: true, message: \"Customer name cannot be empty\" }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Contact Number\"\r\n                            name=\"tel\"\r\n                            rules={[{ required: true, message: \"Contact number cannot be empty\" },{pattern:/^1[3-9]\\d{9}$/,message:\"Please enter a valid phone number\"}]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Business Status\"\r\n                            name=\"status\"\r\n                            rules={[{ required: true, message: \"Business status cannot be empty\" }]}\r\n                        >\r\n                            <Radio.Group>\r\n                                <Radio value=\"1\">Operating</Radio>\r\n                                <Radio value=\"2\">Suspended</Radio>\r\n                                <Radio value=\"3\">Closed</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Industry\"\r\n                            name=\"business\"\r\n                            rules={[{ required: true, message: \"Industry cannot be empty\" }]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Email\"\r\n                            name=\"email\"\r\n                            rules={[{ required: true, message: \"Email cannot be empty\" }]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Unified Credit Code\"\r\n                            name=\"creditCode\"\r\n                            rules={[{ required: true, message: \"Unified credit code cannot be empty\" }]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Business Registration Number\"\r\n                            name=\"industryNum\"\r\n                            rules={[{ required: true, message: \"Business registration number cannot be empty\" }]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Organization Code\"\r\n                            name=\"organizationCode\"\r\n                            rules={[{ required: true, message: \"Organization code cannot be empty\" }]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={16}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            label=\"Legal Representative\"\r\n                            name=\"legalPerson\"\r\n                            rules={[{ required: true, message: \"Legal representative cannot be empty\" }]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n            </Form>\r\n        </Modal>\r\n\r\n    </>\r\n}\r\nexport default UserForm","import { post } from \"../utils/http/request\";\r\nimport type { DataType } from \"../page/users/interface\";\r\ninterface searchType{\r\n    page:number;\r\n    pageSize:number;\r\n    companyName?:string;\r\n    contact?:string;\r\n    tel?:string;\r\n}\r\n\r\nexport function getUserList(data:searchType){\r\n    return post(\"/userList\",data)\r\n}\r\n//删除客户\r\nexport function deleteUser(id:string){\r\n    return post(\"/deleteUser\",{id})\r\n}\r\n//批量删除客户\r\nexport function batchDeleteUser(ids:React.Key[]){\r\n    return post(\"/batchDeleteUser\",{ids})\r\n}\r\n//编辑/新增 企业接口\r\nexport function editUser(data:DataType){\r\n    return post(\"/editUser\",data)\r\n\r\n}","import React from \"react\";\r\nimport { Card, Row, Col, Input, Button, Table, Pagination,Tag,Popconfirm,message  } from \"antd\"\r\nimport type { TableProps } from 'antd';\r\nimport { useState, useEffect, useMemo,useCallback } from \"react\";\r\nimport type { DataType } from \"./interface\";\r\nimport { getUserList } from \"../../api/userList\";\r\nimport type { PaginationProps } from 'antd';\r\nimport { deleteUser,batchDeleteUser } from \"../../api/userList\";\r\nimport UserForm from \"./userForm\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUserData } from \"../../store/user/userSlice\";\r\ninterface searchType {\r\n    companyName: string;\r\n    contact: string;\r\n    phone: string\r\n\r\n}\r\n\r\nfunction Users() {\r\n    const [dataList, setDataList] = useState<DataType[]>([])\r\n    const [page, setPage] = useState<number>(1);\r\n    const [pageSize, setPageSize] = useState<number>(10);\r\n    const [total, setTotal] = useState<number>(0)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([])\r\n    const [isModalOpen,setIsModalOpen]=useState<boolean>(false)\r\n    const [title,setTitle]=useState<string>(\"\")\r\n    const dispatch=useDispatch()\r\n    const [formData, setFormData] = useState<searchType>({\r\n        companyName: \"\",\r\n        contact: \"\",\r\n        phone: \"\"\r\n    })\r\n   \r\n   const disabled= useMemo(()=>{\r\n        return selectedRowKeys.length?false:true\r\n    },[selectedRowKeys])\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n    }, [page,pageSize])\r\n\r\n    const loadData = async () => {\r\n        setLoading(true)\r\n        const { data: { list, total } } = await getUserList({ ...formData, page, pageSize });\r\n        setLoading(false)\r\n        setDataList(list)\r\n        setTotal(total)\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }))\r\n    }\r\n    const onSelectChange = (selectedRowKeys: React.Key[]) => {\r\n        setSelectedRowKeys(selectedRowKeys)\r\n    }\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        onChange: onSelectChange\r\n    }\r\n    const onChange:PaginationProps['onChange']=(page,pageSize)=>{\r\n       setPage(page)\r\n       setPageSize(pageSize);\r\n    }\r\n    const reset=()=>{\r\n        setSelectedRowKeys([]);\r\n        setFormData({ companyName: \"\",contact: \"\",phone: \"\"})\r\n        setPage(1)\r\n        setPageSize(10);\r\n        loadData()\r\n\r\n    }\r\n    const confirm=async function(id:string){\r\n      const {data}= await  deleteUser(id);\r\n      message.success(data);\r\n      loadData();\r\n     \r\n    }\r\n    const batchDelete=async ()=>{\r\n        const {data}=await batchDeleteUser(selectedRowKeys)\r\n        message.success(data);\r\n        loadData();\r\n    }\r\n    const edit=(record:DataType)=>{\r\n        setIsModalOpen(true);\r\n        setTitle(\"Edit Enterprise\");\r\n        dispatch(setUserData(record))\r\n    }\r\n\r\n    const add=()=>{\r\n        setIsModalOpen(true);\r\n        setTitle(\"Add Enterprise\");\r\n        dispatch(setUserData({}))\r\n    }\r\n\r\n    const hideModal=useCallback(()=>{\r\n        setIsModalOpen(false)\r\n    },[])\r\n\r\n    const columns: TableProps<DataType>['columns'] = [\r\n        {\r\n            title: \"No.\",\r\n            key: \"index\",\r\n            render(value, record, index) {\r\n                return index + 1\r\n            },\r\n        },\r\n        {\r\n            title: \"Customer Name\",\r\n            key: \"name\",\r\n            dataIndex: \"name\"\r\n        },\r\n        {\r\n            title: \"Business Status\",\r\n            key: \"status\",\r\n            dataIndex: \"status\",\r\n            render(value){\r\n                if(value==1){\r\n                    return <Tag color=\"green\">Operating</Tag>\r\n                }else if(value==2){\r\n                    return <Tag color=\"#f50\">Suspended</Tag>\r\n                }else if(value==3){\r\n                    return <Tag color=\"red\">Closed</Tag>\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: \"Contact Number\",\r\n            key: \"tel\",\r\n            dataIndex: \"tel\",\r\n        },\r\n        {\r\n            title: \"Industry\",\r\n            key: \"business\",\r\n            dataIndex: \"business\"\r\n        },\r\n        {\r\n            title: \"Email\",\r\n            key: \"email\",\r\n            dataIndex: \"email\"\r\n        },\r\n        {\r\n            title: \"Unified Credit Code\",\r\n            key: \"creditCode\",\r\n            dataIndex: \"creditCode\"\r\n        },\r\n        {\r\n            title: \"Business Registration Number\",\r\n            key: \"industryNum\",\r\n            dataIndex: \"industryNum\"\r\n        },\r\n        {\r\n            title: \"Organization Code\",\r\n            key: \"organizationCode\",\r\n            dataIndex: \"organizationCode\"\r\n        },\r\n        {\r\n            title: \"Legal Representative\",\r\n            key: \"legalPerson\",\r\n            dataIndex: \"legalPerson\"\r\n        },\r\n        {\r\n            title: \"Action\",\r\n            key: \"operate\",\r\n            render(value, record, index) {\r\n                return <>\r\n                    <Button type=\"primary\" size=\"small\" onClick={()=>edit(record)}>Edit</Button>\r\n                    <Popconfirm \r\n                        title=\"Delete Confirmation\"\r\n                        description=\"Are you sure you want to delete?\"\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                        onConfirm={()=>confirm(record.id)}\r\n                    >\r\n                         <Button type=\"primary\" danger className=\"ml\" size=\"small\" >Delete</Button>\r\n                    </Popconfirm>\r\n                   \r\n                </>\r\n            },\r\n        },\r\n    \r\n    ];\r\n    return <div className=\"users\">\r\n        <MyUserForm visible={isModalOpen} hideModal={hideModal} title={title} loadData={loadData}/>\r\n        <Card className=\"search\">\r\n            <Row gutter={16}>\r\n                <Col span={7}>\r\n                    <p>Enterprise Name:</p>\r\n                    <Input name=\"companyName\" value={formData.companyName} onChange={handleChange} />\r\n                </Col>\r\n                <Col span={7}>\r\n                    <p>Contact Person:</p>\r\n                    <Input name=\"contact\" value={formData.contact} onChange={handleChange} />\r\n                </Col>\r\n                <Col span={7}>\r\n                    <p>Contact Number:</p>\r\n                    <Input name=\"phone\" value={formData.phone} onChange={handleChange} />\r\n                </Col>\r\n                <Col span={3}>\r\n                    <Button type=\"primary\" onClick={loadData}>Search</Button>\r\n                    <Button className=\"ml\" onClick={reset}>Reset</Button>\r\n                </Col>\r\n            </Row>\r\n        </Card>\r\n        <Card className=\"mt tr\">\r\n            <Button type=\"primary\" onClick={add}>Add Enterprise</Button>\r\n            <Button danger type=\"primary\" className=\"ml\" disabled={disabled} onClick={batchDelete}>Batch Delete</Button>\r\n        </Card>\r\n        <Card className=\"mt\">\r\n            <Table\r\n                columns={columns}\r\n                dataSource={dataList}\r\n                rowKey={(record) => record.id}\r\n                loading={loading}\r\n                rowSelection={rowSelection}\r\n                pagination={false}\r\n            />\r\n            <Pagination\r\n                className=\"fr mt\"\r\n                total={total}\r\n                current={page}\r\n                pageSize={pageSize}\r\n                showSizeChanger\r\n                showQuickJumper\r\n                showTotal={(total) => `Total ${total} items`}\r\n                onChange={onChange}\r\n            />\r\n        </Card>\r\n    </div>\r\n}\r\n\r\nconst MyUserForm=React.memo(UserForm)\r\nexport default Users"],"names":["props","form","Form","useForm","userData","useSelector","state","userSlice","visible","hideModal","title","loadData","useEffect","resetFields","setFieldsValue","_jsx","_Fragment","children","Modal","open","onCancel","width","onOk","handleOk","validateFields","then","async","data","post","editUser","res","message","success","catch","err","console","log","_jsxs","labelCol","span","wrapperCol","Row","gutter","Col","Item","label","name","rules","required","Input","pattern","Radio","value","MyUserForm","React","UserForm","dataList","setDataList","useState","page","setPage","pageSize","setPageSize","total","setTotal","loading","setLoading","selectedRowKeys","setSelectedRowKeys","isModalOpen","setIsModalOpen","setTitle","dispatch","useDispatch","formData","setFormData","companyName","contact","phone","disabled","useMemo","length","list","handleChange","e","target","prevState","rowSelection","onChange","confirm","id","deleteUser","useCallback","columns","key","render","record","index","dataIndex","Tag","color","Button","type","size","onClick","setUserData","edit","Popconfirm","description","okText","cancelText","onConfirm","danger","className","Card","reset","add","ids","Table","dataSource","rowKey","pagination","Pagination","current","showSizeChanger","showQuickJumper","showTotal","concat"],"sourceRoot":""}